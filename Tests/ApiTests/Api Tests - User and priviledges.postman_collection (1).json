{
	"info": {
		"_postman_id": "96f97c68-f7d4-44a7-ad85-8746b6262298",
		"name": "Api Tests / User and priviledges",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35193305"
	},
	"item": [
		{
			"name": "Create User / Postive",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains user data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"username\");\r",
							"    pm.expect(jsonData.username).to.equal(\"Batman\");\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Batman\",\r\n    \"password\": \"Gothamcity!!\",\r\n    \"repeatedPassword\": \"Gothamcity!!\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7124/mysql/api/user/create-user",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7124",
					"path": [
						"mysql",
						"api",
						"user",
						"create-user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User / Negative / Body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains validation error details\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    // Tjek at responsen indeholder de forventede felter\r",
							"    pm.expect(jsonData).to.have.property(\"type\");\r",
							"    pm.expect(jsonData.type).to.include(\"https://tools.ietf.org/html/rfc9110#section-15.5.1\");\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"title\");\r",
							"    pm.expect(jsonData.title).to.equal(\"One or more validation errors occurred.\");\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"status\");\r",
							"    pm.expect(jsonData.status).to.equal(400);\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"errors\");\r",
							"\r",
							"    // Tjek for specifikke fejlbeskeder i 'errors'\r",
							"    const errors = jsonData.errors;\r",
							"    pm.expect(errors).to.have.property(\"$\");\r",
							"    pm.expect(errors.$[0]).to.include(\"JSON deserialization for type 'OurSolarSystemAPI.Models.CreateUserDto' was missing required properties including: 'username'.\");\r",
							"\r",
							"    pm.expect(errors).to.have.property(\"userInfo\");\r",
							"    pm.expect(errors.userInfo[0]).to.equal(\"The userInfo field is required.\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": 400,\r\n    \"password\": \"securePassword!\",\r\n    \"repeatedPassword\": \"securePassword!\"\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7124/mysql/api/user/create-user",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7124",
					"path": [
						"mysql",
						"api",
						"user",
						"create-user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User / Negative / diffrent password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains password mismatch error\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.include(\"Passwords are not matching\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Superman\",\r\n    \"password\": \"Gothamcity!!\",\r\n    \"repeatedPassword\": \"diffrentpassword\"\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7124/mysql/api/user/create-user",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7124",
					"path": [
						"mysql",
						"api",
						"user",
						"create-user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Autheticate user / negative",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains authentication error\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.include(\"authentication failed\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Batman\",\r\n    \"password\": \"wrongpassword\"\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7124/mysql/api/user/authenticate-user",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7124",
					"path": [
						"mysql",
						"api",
						"user",
						"authenticate-user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User by Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 400\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);\r",
							"});\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    pm.test(\"Response is JSON\", function () {\r",
							"        pm.response.to.be.json;\r",
							"    });\r",
							"\r",
							"    pm.test(\"Response contains correct user data\", function () {\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"username\");\r",
							"        pm.expect(jsonData.username).to.equal(\"testuser\");\r",
							"        pm.expect(jsonData).to.have.property(\"id\");\r",
							"        pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    });\r",
							"} else if (pm.response.code === 400) {\r",
							"    pm.test(\"Response contains error message\", function () {\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"error\");\r",
							"        pm.expect(jsonData.error).to.be.a(\"string\");\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7124/mysql/api/user/get-user-by-username?username=testuser",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7124",
					"path": [
						"mysql",
						"api",
						"user",
						"get-user-by-username"
					],
					"query": [
						{
							"key": "username",
							"value": "testuser"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get planet by Horizon id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
							"});\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    pm.test(\"Response is JSON\", function () {\r",
							"        pm.response.to.be.json;\r",
							"    });\r",
							"\r",
							"    pm.test(\"Response contains expected planet fields\", function () {\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"id\");\r",
							"        pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"        pm.expect(jsonData).to.have.property(\"name\");\r",
							"        pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    });\r",
							"} else if (pm.response.code === 404) {\r",
							"    pm.test(\"Response contains error message\", function () {\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"error\");\r",
							"        pm.expect(jsonData.error).to.be.a(\"string\");\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7124/mysql/api/planet/get-by-horizon-id?horizonId=999",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7124",
					"path": [
						"mysql",
						"api",
						"planet",
						"get-by-horizon-id"
					],
					"query": [
						{
							"key": "horizonId",
							"value": "999"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Planet by Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
							"});\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    pm.test(\"Response is JSON\", function () {\r",
							"        pm.response.to.be.json;\r",
							"    });\r",
							"\r",
							"    pm.test(\"Response contains expected planet fields\", function () {\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"id\");\r",
							"        pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"        pm.expect(jsonData).to.have.property(\"name\");\r",
							"        pm.expect(jsonData.name.toLowerCase()).to.equal(\"earth\".toLowerCase());\r",
							"    });\r",
							"} else if (pm.response.code === 404) {\r",
							"    pm.test(\"Response contains error message\", function () {\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"error\");\r",
							"        pm.expect(jsonData.error).to.be.a(\"string\");\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7124/mysql/api/planet/get-by-name?name=Earth",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7124",
					"path": [
						"mysql",
						"api",
						"planet",
						"get-by-name"
					],
					"query": [
						{
							"key": "name",
							"value": "Earth"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Distance between planets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
							"});\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    pm.test(\"Response is JSON\", function () {\r",
							"        pm.response.to.be.json;\r",
							"    });\r",
							"\r",
							"    pm.test(\"Response contains distance result\", function () {\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"distance\");\r",
							"        pm.expect(jsonData.distance).to.be.a(\"number\");\r",
							"        pm.expect(jsonData).to.have.property(\"dateTime\");\r",
							"        pm.expect(new Date(jsonData.dateTime)).to.be.a(\"date\");\r",
							"    });\r",
							"} else if (pm.response.code === 404) {\r",
							"    pm.test(\"Response contains error message\", function () {\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"error\");\r",
							"        pm.expect(jsonData.error).to.be.a(\"string\");\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:7124/mysql/api/planet/get-distance-between?firstHorizonId=199&secondHorizonId=399&day=1&month=1&year=2025",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7124",
					"path": [
						"mysql",
						"api",
						"planet",
						"get-distance-between"
					],
					"query": [
						{
							"key": "firstHorizonId",
							"value": "199"
						},
						{
							"key": "secondHorizonId",
							"value": "399"
						},
						{
							"key": "day",
							"value": "1"
						},
						{
							"key": "month",
							"value": "1"
						},
						{
							"key": "year",
							"value": "2025"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User/ positive",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User deleted successfully\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.a(\"boolean\");\r",
							"    pm.expect(jsonData).to.equal(true);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://localhost:7124/mysql/api/user/delete-user?username=Batman&password=Gothamcity!!&repeatedPassword=Gothamcity!!",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7124",
					"path": [
						"mysql",
						"api",
						"user",
						"delete-user"
					],
					"query": [
						{
							"key": "username",
							"value": "Batman"
						},
						{
							"key": "password",
							"value": "Gothamcity!!"
						},
						{
							"key": "repeatedPassword",
							"value": "Gothamcity!!"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User/ negative",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.include(\"No user found by that id\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://localhost:7124/mysql/api/user/delete-user?username=Dontexist&password=Gothamcity!!&repeatedPassword=Gothamcity!!",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7124",
					"path": [
						"mysql",
						"api",
						"user",
						"delete-user"
					],
					"query": [
						{
							"key": "username",
							"value": "Dontexist"
						},
						{
							"key": "password",
							"value": "Gothamcity!!"
						},
						{
							"key": "repeatedPassword",
							"value": "Gothamcity!!"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User/ negative /password forkert",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains 'Invalid password' error\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    // Check that the response contains an error field\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"\r",
							"    // Validate the error message\r",
							"    pm.expect(jsonData.error).to.equal(\"Incorrect password\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://localhost:7124/mysql/api/user/delete-user?username=Superman&password=wrong11!&repeatedPassword=wrong11!",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7124",
					"path": [
						"mysql",
						"api",
						"user",
						"delete-user"
					],
					"query": [
						{
							"key": "username",
							"value": "Superman"
						},
						{
							"key": "password",
							"value": "wrong11!"
						},
						{
							"key": "repeatedPassword",
							"value": "wrong11!"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains user data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    // Check that the response contains the correct fields\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"username\");\r",
							"\r",
							"    // Validate the returned values\r",
							"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.username).to.equal(\"Superman\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://localhost:7124/mysql/api/user/update-username?oldUsername=Batman&newUsername=Superman&password=Gothamcity!!&repeatedPassword=Gothamcity!!",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7124",
					"path": [
						"mysql",
						"api",
						"user",
						"update-username"
					],
					"query": [
						{
							"key": "oldUsername",
							"value": "Batman"
						},
						{
							"key": "newUsername",
							"value": "Superman"
						},
						{
							"key": "password",
							"value": "Gothamcity!!"
						},
						{
							"key": "repeatedPassword",
							"value": "Gothamcity!!"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update username / negative/ user not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.include(\"No user found by that id\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://localhost:7124/mysql/api/user/update-username?oldUsername=not&newUsername=notexist&password=secretPassword!2&repeatedPassword=secretPassword!2",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7124",
					"path": [
						"mysql",
						"api",
						"user",
						"update-username"
					],
					"query": [
						{
							"key": "oldUsername",
							"value": "not"
						},
						{
							"key": "newUsername",
							"value": "notexist"
						},
						{
							"key": "password",
							"value": "secretPassword!2"
						},
						{
							"key": "repeatedPassword",
							"value": "secretPassword!2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update username / negative/ password dont match",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains password mismatch error\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"    pm.expect(jsonData.error).to.include(\"Incorrect password\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://localhost:7124/mysql/api/user/update-username?oldUsername=Batman&newUsername=Superman&password=secretPassword!2&repeatedPassword=secretPassword!2",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7124",
					"path": [
						"mysql",
						"api",
						"user",
						"update-username"
					],
					"query": [
						{
							"key": "oldUsername",
							"value": "Batman"
						},
						{
							"key": "newUsername",
							"value": "Superman"
						},
						{
							"key": "password",
							"value": "secretPassword!2"
						},
						{
							"key": "repeatedPassword",
							"value": "secretPassword!2"
						}
					]
				}
			},
			"response": []
		}
	]
}