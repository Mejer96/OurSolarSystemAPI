// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OurSolarSystemAPI.Repository;

#nullable disable

namespace OurSolarSystemAPI.Migrations
{
    [DbContext(typeof(OurSolarSystemContext))]
    [Migration("20241128143951_AddAutoGeneratedId")]
    partial class AddAutoGeneratedId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("OurSolarSystemAPI.Models.ArtificialSatellite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apogee")
                        .HasColumnType("longtext");

                    b.Property<string>("BStarDragTerm")
                        .HasColumnType("longtext");

                    b.Property<string>("Eccentricity")
                        .HasColumnType("longtext");

                    b.Property<string>("Inclination")
                        .HasColumnType("longtext");

                    b.Property<string>("LaunchDate")
                        .HasColumnType("longtext");

                    b.Property<string>("LaunchSite")
                        .HasColumnType("longtext");

                    b.Property<string>("MeanAnomaly")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NoradId")
                        .HasColumnType("int");

                    b.Property<string>("NssdcId")
                        .HasColumnType("longtext");

                    b.Property<string>("OrbitNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Perigee")
                        .HasColumnType("longtext");

                    b.Property<string>("Period")
                        .HasColumnType("longtext");

                    b.Property<int>("PlanetId")
                        .HasColumnType("int");

                    b.Property<string>("Rcs")
                        .HasColumnType("longtext");

                    b.Property<string>("SemiMajorAxis")
                        .HasColumnType("longtext");

                    b.Property<string>("Source")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.ToTable("ArtificialSatellites");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.Barycenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HorizonId")
                        .HasColumnType("int");

                    b.Property<string>("MongoId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Barycenters");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.EphemerisArtificialSatellite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Epoch")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("PositionX")
                        .HasColumnType("double");

                    b.Property<double>("PositionY")
                        .HasColumnType("double");

                    b.Property<double>("PositionZ")
                        .HasColumnType("double");

                    b.Property<int>("TleArtificialSatelliteId")
                        .HasColumnType("int");

                    b.Property<double>("VelocityX")
                        .HasColumnType("double");

                    b.Property<double>("VelocityY")
                        .HasColumnType("double");

                    b.Property<double>("VelocityZ")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("TleArtificialSatelliteId");

                    b.ToTable("EphemerisArtificialSatellites");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.EphemerisBarycenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BarycenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("JulianDate")
                        .HasColumnType("double");

                    b.Property<string>("MongoId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("PositionX")
                        .HasColumnType("double");

                    b.Property<double>("PositionY")
                        .HasColumnType("double");

                    b.Property<double>("PositionZ")
                        .HasColumnType("double");

                    b.Property<double>("VelocityX")
                        .HasColumnType("double");

                    b.Property<double>("VelocityY")
                        .HasColumnType("double");

                    b.Property<double>("VelocityZ")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("BarycenterId");

                    b.ToTable("EphemerisBarycenters");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.EphemerisMoon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("JulianDate")
                        .HasColumnType("double");

                    b.Property<int>("MoonId")
                        .HasColumnType("int");

                    b.Property<double>("PositionX")
                        .HasColumnType("double");

                    b.Property<double>("PositionY")
                        .HasColumnType("double");

                    b.Property<double>("PositionZ")
                        .HasColumnType("double");

                    b.Property<double>("VelocityX")
                        .HasColumnType("double");

                    b.Property<double>("VelocityY")
                        .HasColumnType("double");

                    b.Property<double>("VelocityZ")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("MoonId");

                    b.ToTable("EphemerisMoons");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.EphemerisPlanet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("JulianDate")
                        .HasColumnType("double");

                    b.Property<int>("PlanetId")
                        .HasColumnType("int");

                    b.Property<double>("PositionX")
                        .HasColumnType("double");

                    b.Property<double>("PositionY")
                        .HasColumnType("double");

                    b.Property<double>("PositionZ")
                        .HasColumnType("double");

                    b.Property<double>("VelocityX")
                        .HasColumnType("double");

                    b.Property<double>("VelocityY")
                        .HasColumnType("double");

                    b.Property<double>("VelocityZ")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.ToTable("EphemerisPlanets");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.Moon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Density")
                        .HasColumnType("longtext");

                    b.Property<string>("Eccentricity")
                        .HasColumnType("longtext");

                    b.Property<string>("GeometricAlbedo")
                        .HasColumnType("longtext");

                    b.Property<string>("Gm")
                        .HasColumnType("longtext");

                    b.Property<string>("GravitationalParameter")
                        .HasColumnType("longtext");

                    b.Property<int>("HorizonId")
                        .HasColumnType("int");

                    b.Property<string>("Inclination")
                        .HasColumnType("longtext");

                    b.Property<string>("MeanRadius")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrbitalPeriod")
                        .HasColumnType("longtext");

                    b.Property<int>("PlanetId")
                        .HasColumnType("int");

                    b.Property<string>("RotationalPeriod")
                        .HasColumnType("longtext");

                    b.Property<string>("SemiMajorAxis")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.ToTable("Moons");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.Planet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AtmosphericPressure")
                        .HasColumnType("longtext");

                    b.Property<string>("Density")
                        .HasColumnType("longtext");

                    b.Property<string>("EquatorialGravity")
                        .HasColumnType("longtext");

                    b.Property<string>("EquatorialRadius")
                        .HasColumnType("longtext");

                    b.Property<string>("EscapeSpeed")
                        .HasColumnType("longtext");

                    b.Property<string>("GeometricAlbedo")
                        .HasColumnType("longtext");

                    b.Property<string>("GravitationalParameter")
                        .HasColumnType("longtext");

                    b.Property<string>("HillsSphereRadius")
                        .HasColumnType("longtext");

                    b.Property<int>("HorizonId")
                        .HasColumnType("int");

                    b.Property<string>("Mass")
                        .HasColumnType("longtext");

                    b.Property<string>("MassRatioToSun")
                        .HasColumnType("longtext");

                    b.Property<string>("MaxAngularDiameter")
                        .HasColumnType("longtext");

                    b.Property<string>("MaxPlanetaryIRAphelion")
                        .HasColumnType("longtext");

                    b.Property<string>("MaxPlanetaryIRMean")
                        .HasColumnType("longtext");

                    b.Property<string>("MaxPlanetaryIRPerihelion")
                        .HasColumnType("longtext");

                    b.Property<string>("MeanSideRealOrbitalPeriod")
                        .HasColumnType("longtext");

                    b.Property<string>("MeanSolarDay")
                        .HasColumnType("longtext");

                    b.Property<string>("MeanTemperature")
                        .HasColumnType("longtext");

                    b.Property<string>("MinPlanetaryIRAphelion")
                        .HasColumnType("longtext");

                    b.Property<string>("MinPlanetaryIRMean")
                        .HasColumnType("longtext");

                    b.Property<string>("MinPlanetaryIRPerihelion")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ObliquityToOrbit")
                        .HasColumnType("longtext");

                    b.Property<string>("OrbitalSpeed")
                        .HasColumnType("longtext");

                    b.Property<string>("PolarGravity")
                        .HasColumnType("longtext");

                    b.Property<string>("SiderealRotationPeriod")
                        .HasColumnType("longtext");

                    b.Property<string>("SiderealRotationRate")
                        .HasColumnType("longtext");

                    b.Property<string>("SolarConstantAphelion")
                        .HasColumnType("longtext");

                    b.Property<string>("SolarConstantMean")
                        .HasColumnType("longtext");

                    b.Property<string>("SolarConstantPerihelion")
                        .HasColumnType("longtext");

                    b.Property<string>("Volume")
                        .HasColumnType("longtext");

                    b.Property<string>("VolumeMeanRadius")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Planets");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.TleArtificialSatellite", b =>
                {
                    b.Property<int>("TleArtificialSatelliteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TleArtificialSatelliteId"));

                    b.Property<int>("ArtificialSatelliteId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ScrapedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Tle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TleArtificialSatelliteId");

                    b.HasIndex("ArtificialSatelliteId");

                    b.ToTable("TleArtificialSatellite");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.ArtificialSatellite", b =>
                {
                    b.HasOne("OurSolarSystemAPI.Models.Planet", "Planet")
                        .WithMany()
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.EphemerisArtificialSatellite", b =>
                {
                    b.HasOne("OurSolarSystemAPI.Models.TleArtificialSatellite", "TleArtificialSatellite")
                        .WithMany()
                        .HasForeignKey("TleArtificialSatelliteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TleArtificialSatellite");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.EphemerisBarycenter", b =>
                {
                    b.HasOne("OurSolarSystemAPI.Models.Barycenter", "Barycenter")
                        .WithMany("Ephemeris")
                        .HasForeignKey("BarycenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barycenter");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.EphemerisMoon", b =>
                {
                    b.HasOne("OurSolarSystemAPI.Models.Moon", "Moon")
                        .WithMany("Ephemeris")
                        .HasForeignKey("MoonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moon");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.EphemerisPlanet", b =>
                {
                    b.HasOne("OurSolarSystemAPI.Models.Planet", "Planet")
                        .WithMany("Ephemeris")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.Moon", b =>
                {
                    b.HasOne("OurSolarSystemAPI.Models.Planet", "Planet")
                        .WithMany("Moons")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.TleArtificialSatellite", b =>
                {
                    b.HasOne("OurSolarSystemAPI.Models.ArtificialSatellite", "artificialSatellite")
                        .WithMany("Tle")
                        .HasForeignKey("ArtificialSatelliteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("artificialSatellite");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.ArtificialSatellite", b =>
                {
                    b.Navigation("Tle");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.Barycenter", b =>
                {
                    b.Navigation("Ephemeris");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.Moon", b =>
                {
                    b.Navigation("Ephemeris");
                });

            modelBuilder.Entity("OurSolarSystemAPI.Models.Planet", b =>
                {
                    b.Navigation("Ephemeris");

                    b.Navigation("Moons");
                });
#pragma warning restore 612, 618
        }
    }
}
